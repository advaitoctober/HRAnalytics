load("~/Documents/GitHub/HRAnalytics/Data/Classification.RData")
plot(LGRocCurve,col = "Yellow",label = "Logistic Regression")
plot(LDARocCurve, add=TRUE, col='Green',label = "LDA")
require(class)
library(caret)
library(klaR)
library("rpart")
library("rpart.plot")
library(randomForest)
library(gbm)
library(quantmod)
library("pROC")
plot(LGRocCurve,col = "Yellow",label = "Logistic Regression")
require(class)
library(caret)
library(klaR)
library("rpart")
library("rpart.plot")
library(randomForest)
library(gbm)
library(quantmod)
library("pROC")
getSymbols('AAPL')
getSymbols('FB')
#Data Loading
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
hrData$left <- as.factor(hrData$left)
leaveSat = hrData[,1]
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
hrData$satisfaction_level = NULL
#pairs(hrData)
attach(hrData)
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
#Numerical response data
#leftTrue_train <- as.numeric(hr_train$left)-1
#leftTrue_test <- as.numeric(hr_test$left)-1
#Error holder
modelName = c()
testErrVector = c()
trainErrVector = c()
##############################################
#Logistic Regression
##############################################
#Model Builiding
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
#Predicting
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
#Rounding
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
LGRocCurve <- roc(as.numeric(as.factor(hrLGPred_test)),as.numeric(hr_test$left))
#Error calculation
LG_test_err <- mean(as.factor(hrLGPred_test) != hr_test$left)
LG_train_err <- mean(as.factor(hrLGPred_train) != hr_train$left)
modelName = c(modelName,'Logistic regression')
testErrVector = c(testErrVector,LG_test_err)
trainErrVector = c(trainErrVector,LG_train_err)
##############################################
#LDA
##############################################
hrLDAMod <- lda(left~., data = hr_train)
summary(hrLDAMod)
#Predicting
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
LDARocCurve <- roc(as.numeric(hrLDAPred_test$class),as.numeric(hr_test$left))
LDA_test_err <- mean(hrLDAPred_test$class != hr_test$left)
LDA_train_err <- mean(hrLDAPred_train$class != hr_train$left)
modelName = c(modelName,'LDA')
testErrVector = c(testErrVector,LDA_test_err)
trainErrVector = c(trainErrVector,LDA_train_err)
##############################################
#QDA
##############################################
hrQDAMod <- qda(left~., data = hr_train)
summary(hrQDAMod)
#Predicting
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
QDARocCurve <- roc(as.numeric(hrQDAPred_test$class),as.numeric(hr_test$left))
QDA_test_err <- mean(hrQDAPred_test$class != hr_test$left)
QDA_train_err <- mean(hrQDAPred_train$class != hr_train$left)
modelName = c(modelName,'QDA')
testErrVector = c(testErrVector,QDA_test_err)
trainErrVector = c(trainErrVector,QDA_train_err)
#####################################
#TREES
#####################################
model.control <- rpart.control(minsplit = 5, xval = 10, cp = 0)
hrTreeMod <- rpart(left~., data = hr_train, method = "class", control = model.control)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0.5)
min_cp = which.min(hrTreeMod$cptable[,4])
hrPruneTreeMod <- prune(hrTreeMod, cp = hrTreeMod$cptable[min_cp,1])
## plot the full tree and the pruned tree
#rpart.plot(hrPruneTreeMod, compress=T,uniform = T)
#text(hrPruneTreeMod, cex = 0.5,pretty = T)
prp(hrPruneTreeMod, , fallen.leaves = FALSE, type=4, extra=1, varlen=0, faclen=0, yesno.yshift=-1)
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTreeRocCurve <- roc(as.numeric(hrPruneTreePred_test),as.numeric(hr_test$left))
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
modelName = c(modelName,'Single Pruned Tree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
#############################################
#Random Forest
#############################################
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
varImpPlot(hrRFMod)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='class')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RFRocCurve <- roc(as.numeric(hrRFPred_test),as.numeric(hr_test$left))
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
modelName = c(modelName,'Random Forest')
testErrVector = c(testErrVector,RF_test_err)
trainErrVector = c(trainErrVector,RF_train_err)
#############################################
#Bagging
############################################
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 8)
varImpPlot(hrBAGMod)
hrBAGPred_test <- predict(hrBAGMod, newdata = hr_test,type='class')
hrBAGPred_train <- predict(hrBAGMod, newdata = hr_train, type='class')
hrBAGPred_valid <- predict(hrBAGMod, newdata = hr_valid, type='class')
BAGRocCurve <- roc(as.numeric(hrBAGPred_test),as.numeric(hr_test$left))
plot(roccurve)
BAG_test_err <- mean(hrBAGPred_test != hr_test$left)
BAG_train_err <- mean(hrBAGPred_train != hr_train$left)
BAG_valid_err <- mean(hrBAGPred_valid != hr_valid$left)
modelName = c(modelName,'Bagging')
testErrVector = c(testErrVector,BAG_test_err)
trainErrVector = c(trainErrVector,BAG_train_err)
############################################
#Boosting
############################################
dep = floor(sqrt(NCOL(data)))
boost_train = hr_train
boost_train$left = as.numeric(boost_train$left)-1
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =100,shrinkage = .0001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 100)
hrBOOSTPred_train <- predict(hrBOOSTMod, newdata = hr_train,type='response', n.trees = 1000)
hrBOOSTPred_valid <- predict(hrBOOSTMod, newdata = hr_valid,type='response', n.trees = 1000)
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_test_err
BOOST_train_err <- mean(hrBOOSTPred_train != hr_train$left)
BOOST_valid_err <- mean(hrBOOSTPred_valid != hr_valid$left)
modelName = c(modelName,'Boosting')
testErrVector = c(testErrVector,BOOST_test_err)
trainErrVector = c(trainErrVector,BOOST_train_err)
errorDF = data.frame(Model_Name = modelName,Training_Error = trainErrVector,Test_Error = testErrVector)
ggplot(errorDF, aes(x = Model_Name,group = 1)) +
geom_line(aes(y = testErrVector), colour="#3EBCC0") +
geom_line(aes(y = trainErrVector), colour = "#F88179") +
scale_x_discrete(limits=c("Logistic regression","LDA","QDA","Single Pruned Tree","Random Forest","Bagging"))+
geom_point(aes(y = testErrVector), colour="#3EBCC0") +
geom_point(aes(y = trainErrVector), colour = "#F88179") +
labs(y = "Error",x= "Models") +
scale_colour_manual(values=c("red", "blue"))
errorDFMelt = melt(errorDF[,c("Model_Name","Training_Error","Test_Error")])
ggplot(errorDFMelt, aes(x = Model_Name, y = value, colour = variable,group = 1)) + geom_line()
ggplot()+
geom_line(aes(RFRocCurve))
plot(LGRocCurve,col = "Yellow",label = "Logistic Regression")
plot(LDARocCurve, add=TRUE, col='Green',label = "LDA")
plot(QDARocCurve, add=TRUE, col='Pink',label = "QDA")
plot(PruneTreeRocCurve, add=TRUE, col='Orange',label = "PrunedTree")
plot(RFRocCurve, add=TRUE, col='Blue',label = "Random Forest")
plot(BAGRocCurve, add=TRUE, col='red',label = "Bagging")
legend("bottomright",legend = c("Logistic Regression","LDA","QDA","Pruned Tree","Random Forest","Bagging"),)
plot(LGRocCurve,col = "Yellow",label = "Logistic Regression")
plot(LDARocCurve, add=TRUE, col='Green',label = "LDA")
plot(QDARocCurve, add=TRUE, col='Pink',label = "QDA")
plot(PruneTreeRocCurve, add=TRUE, col='Orange',label = "PrunedTree")
plot(RFRocCurve, add=TRUE, col='Blue',label = "Random Forest")
plot(BAGRocCurve, add=TRUE, col='red',label = "Bagging")
plot(LGRocCurve,col = "Yellow",label = "Logistic Regression")
plot(LDARocCurve, add=TRUE, col='Green',label = "LDA")
plot(QDARocCurve, add=TRUE, col='Pink',label = "QDA")
plot(PruneTreeRocCurve, add=TRUE, col='Orange',label = "PrunedTree")
plot(RFRocCurve, add=TRUE, col='Blue',label = "Random Forest")
plot(BAGRocCurve, add=TRUE, col='red',label = "Bagging")
legend("bottomright",legend = c("Logistic Regression","LDA","QDA","Pruned Tree","Random Forest","Bagging"),)
require(class)
rm(list = ls())
getwd()
require(class)
library(ggplot2)
require(reshape2)
library(ggcorrplot)
library(GGally)
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
attach(hrData)
highSal = subset(hrData, salary == "high")
medSal = subset(hrData, salary =="medium")
lowSal = subset(hrData, salary == "low")
summary(highSal)
summary(lowSal)
#Number of people left in per salary band
vSal = c('Low','Meduim','High')
vTotPop = c(nrow(lowSal),nrow(medSal),nrow(highSal))
vSalLeft = c(nrow(subset(lowSal, left ==1)),nrow(subset(medSal, left ==1)),nrow(subset(highSal, left ==1)) )
salDF = data.frame(Salary=vSal,TotalEmployees = vTotPop, EmployeesLeft=vSalLeft)
salDF["PercentLeft"] = (salDF["EmployeesLeft"]/salDF["TotalEmployees"])*100
salDF["EmployeesStayed"] = (salDF["TotalEmployees"]-salDF["EmployeesLeft"])
#barplot(salDF$PercentLeft,names.arg = salDF$Salary,ylab = "Attrition Percent",xlab = "Salary",main="Salary vs Attrition %")
salDF$Salary <- as.factor(salDF$Salary)
ggplot(salDF,aes(x=salDF$Salary, y= salDF$PercentLeft,fill=salDF$Salary)) +
geom_bar(stat="identity", position = "dodge") +
ggtitle("\tSalary Type vs Percentage Attrition") +
labs(y ="Percentage left",x = "Salary Level",fill="Salary Levels") +
scale_x_discrete(limits=c('low','meduim','high'))
############################
#By Promotion last 5 year
############################
plot(hrData$promotion_last_5years)
hist(hrData$promotion_last_5years,xlab = "Whether received a Promotion or not" , ylab = "Frequency" ,main = "Distribution of people if they received a promotion")
promo1Left = nrow(subset(hrData,promotion_last_5years ==1 & left==1))
promo0Left = nrow(subset(hrData,promotion_last_5years ==0 & left==1))
promo1Stay = nrow(subset(hrData,promotion_last_5years ==1 & left==0))
promo0Stay = nrow(subset(hrData,promotion_last_5years ==0 & left==0))
promoDF = data.frame(Promotion = c("Promoted","Promoted","NotPromoted","NotPromoted") ,Left = c("Stayed","Left","Stayed","Left"),NoOfEmployees = c(promo1Stay,promo1Left,promo0Stay,promo0Left))
ggplot(promoDF, aes(Promotion,NoOfEmployees , fill = Left)) +
geom_bar(stat="identity", position = "dodge")
slices <- c(promo1Left, promo0Left,promo1Stay, promo0Stay)
lbls <- c("Promoted and Left", "Not Promoted and Left", "Promoted and Stayed", "Not Promoted and Stayed")
pie(slices, labels = lbls, main="Representation of People")
############################
#By Department
############################
depDF = data.frame(aggregate(left~department,data = hrData,FUN = length))
depDF
colnames(depDF) = c("Department","TotalEmployees")
depDF$Left = (aggregate(left~department,data = hrData,FUN = sum))[,2]
depDF$Stayed = depDF$TotalEmployees - depDF$Left
depDF$Attrition = (depDF$Left / depDF$TotalEmployees) * 100
depDFMelt = melt(depDF[,c("Department","Stayed","Left")])
ggplot(depDFMelt,aes(x = Department,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
theme(axis.text.x = element_text(size=10, angle=30 , hjust=0.95,vjust=0.95))
ggplot(depDF,aes(x = Department,y = Attrition)) +
geom_bar(aes(fill = Attrition),stat = "identity",position = "dodge") +
theme(axis.text.x = element_text(size=10, angle=30 , hjust=0.95,vjust=0.95))
################################
#Satisfaction Level
################################
satDF = hrData[,c("satisfaction_level","left")]
satDF$sat_category = ifelse(satDF$satisfaction_level>= 0.8,"Very High","")
satDF$sat_category = ifelse(satDF$satisfaction_level>= 0.6 & satDF$satisfaction_level< 0.8,"High","")
satDF$sat_category = ifelse(satDF$satisfaction_level>= 0.4 & satDF$satisfaction_level< 0.6,"Medium","")
satDF$sat_category = ifelse(satDF$satisfaction_level>= 0.2 & satDF$satisfaction_level< 0.4,"Low","")
satDF$sat_category = ifelse(satDF$satisfaction_level< 0.2,"Very Low","")
satDF$sat_category = as.factor(ifelse(satDF$satisfaction_level>= 0.8,"Very High",ifelse(satDF$satisfaction_level>= 0.6 & satDF$satisfaction_level< 0.8,"High",ifelse(satDF$satisfaction_level>= 0.4 & satDF$satisfaction_level< 0.6,"Medium",ifelse(satDF$satisfaction_level>= 0.2 & satDF$satisfaction_level< 0.4,"Low",ifelse(satDF$satisfaction_level< 0.2,"Very Low",""))))))
satAggDF = data.frame(aggregate(left~sat_category,data = satDF,FUN = length))
colnames(satAggDF) = c("SatisfactionCategory","TotalEmployees")
satAggDF$Left = (aggregate(left~sat_category,data = satDF,FUN = sum))[,2]
satAggDF$Stayed = satAggDF$TotalEmployees - satAggDF$Left
satAggDF$Attrition = (satAggDF$Left / satAggDF$TotalEmployees) * 100
satDFMelt = melt(satAggDF[,c("SatisfactionCategory","Stayed","Left")])
ggplot(satDFMelt,aes(x = SatisfactionCategory,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")+
scale_x_discrete(limits=c("Very Low","Low","Medium","High","Very High"))
ggplot(satAggDF,aes(x = SatisfactionCategory,y = Attrition)) +
geom_bar(aes(fill = Attrition),stat = "identity",position = "dodge")+
scale_x_discrete(limits=c("Very Low","Low","Medium","High","Very High"))+
scale_colour_manual(values = rev(brewer.pal(3,"BuPu")))
#plot(hrData$last_evaluation[which(left==0)])
#cor(hrData[,1:8])
################################
#By work accident
################################
nrow(subset(highSal, Work_accident ==1)) # 192
nrow(subset(medSal, Work_accident ==1)) #937
nrow(subset(lowSal, Work_accident ==1)) #1040
################################
#To check whether employee satisfication level is sufficicent to predict whether employee will leave or not
################################
sfLvl_left = data.frame(hrData$left,hrData$satisfaction_level)
sfLvl_left$hrData.predLeft =  ifelse(sfLvl_left$hrData.satisfaction_level < 0.5,1,0)
sfLvl_left$hrData.satisfaction_level = NULL
cor(sfLvl_left)
require(utils)
mean(sfLvl_left$hrData.left != sfLvl_left$hrData.predLeft) #20% error
################################
#Number of years spent in the company
################################
timespent_leftstay = data.frame(hrData$time_spend_company,hrData$left)
timespent_left <- subset(timespent_leftstay , timespent_leftstay$hrData.left == 1)
avg_time_spent_before_leaving <- mean(timespent_left$hrData.time_spend_company)
#calc average , min and max is inconsequential
avg_time_spent_before_leaving
min(timespent_left$hrData.time_spend_company)
max(timespent_left$hrData.time_spend_company)
timespent_stay <- subset(timespent_leftstay , timespent_leftstay$hrData.left == 0)
avg_time_spent_if_stay <- mean(timespent_stay$hrData.time_spend_company)
#calc average , min and max is inconsequential
avg_time_spent_if_stay
min(timespent_stay$hrData.time_spend_company)
max(timespent_stay$hrData.time_spend_company)
summary(hrData$time_spend_company)
noYears = data.frame(aggregate(left~time_spend_company,data = hrData,FUN = length))
colnames(noYears) = c("No_Of_Years_spent_in_company","TotalEmployees")
noYears$Left = (aggregate(left~time_spend_company,data = satDF,FUN = sum))[,2]
noYears$Stayed = noYears$TotalEmployees - noYears$Left
noYears$Attrition = (noYears$Left / noYears$TotalEmployees) * 100
noYears$No_Of_Years_spent_in_company = as.factor(noYears$No_Of_Years_spent_in_company)
#plot(noProj$No_Of_Project,noProj$Attrition)
noYearsMelt = melt(noYears[,c("No_Of_Years_spent_in_company","Stayed","Left")])
ggplot(noYearsMelt,aes(x = No_Of_Years_spent_in_company,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")
ggplot(noYears,aes(x=No_Of_Years_spent_in_company, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition))
################################
#Average monthly hours at workplace
################################
avgmhrs_leftstay = data.frame(hrData$average_montly_hours,hrData$left)
avgmhrs_left <- subset(avgmhrs_leftstay , avgmhrs_leftstay$hrData.left == 1)
avg_monthlyhrs_spent_before_leaving <- mean(avgmhrs_left$hrData.average_montly_hours)
avg_monthlyhrs_spent_before_leaving
min(avgmhrs_left$hrData.average_montly_hours)
max(avgmhrs_left$hrData.average_montly_hours)
avgmhrs_stay <- subset(avgmhrs_leftstay , avgmhrs_leftstay$hrData.left == 0)
avg_monthlyhrs_if_stay <- mean(avgmhrs_stay$hrData.average_montly_hours)
avg_monthlyhrs_if_stay
min(avgmhrs_stay$hrData.average_montly_hours)
max(avgmhrs_stay$hrData.average_montly_hours)
summary(hrData$average_montly_hours)
noHours = data.frame(aggregate(left~average_montly_hours,data = hrData,FUN = length))
colnames(noHours) = c("Average_Monthly_Hours","TotalEmployees")
##
noHours$Left = (aggregate(left~average_montly_hours,data = satDF,FUN = sum))[,2]
noHours$Stayed = noHours$TotalEmployees - noHours$Left
noHours$Attrition = (noHours$Left / noHours$TotalEmployees) * 100
noHours$Average_Monthly_Hours = as.factor(noHours$Average_Monthly_Hours)
#plot(noProj$No_Of_Project,noProj$Attrition)
noHourMelt = melt(noHours[,c("Average_Monthly_Hours","Stayed","Left")])
ggplot(noHourMelt,aes(x = Average_Monthly_Hours,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")
ggplot(noHours,aes(x=Average_Monthly_Hours, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition))
##########################################
#No. of Projects
##########################################
summary(hrData$number_project)
noProj = data.frame(aggregate(left~number_project,data = hrData,FUN = length))
colnames(noProj) = c("No_Of_Project","TotalEmployees")
noProj$Left = (aggregate(left~number_project,data = satDF,FUN = sum))[,2]
noProj$Stayed = noProj$TotalEmployees - noProj$Left
noProj$Attrition = (noProj$Left / noProj$TotalEmployees) * 100
noProj$No_Of_Project = as.factor(noProj$No_Of_Project)
#plot(noProj$No_Of_Project,noProj$Attrition)
noProjMelt = melt(noProj[,c("No_Of_Project","Stayed","Left")])
ggplot(noProjMelt,aes(x = No_Of_Project,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")
ggplot(noProj,aes(x=No_Of_Project, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition))
##########################################
#Relation between no of years and the projects completed
##########################################
plot(hrData$number_project,hrData$time_spend_company)
avg_yrs_2 = mean(hrData[hrData$number_project==2,]$time_spend_company)
avg_yrs_3 = mean(hrData[hrData$number_project==3,]$time_spend_company)
avg_yrs_4 = mean(hrData[hrData$number_project==4,]$time_spend_company)
avg_yrs_5 = mean(hrData[hrData$number_project==5,]$time_spend_company)
avg_yrs_6 = mean(hrData[hrData$number_project==6,]$time_spend_company)
avg_yrs_7 = mean(hrData[hrData$number_project==7,]$time_spend_company)
p_vs_TimeSpentDF = data.frame(No_of_projects =  c(2,3,4,5,6,7),Avg_Years_Spent = c(avg_yrs_2,avg_yrs_3,avg_yrs_4,avg_yrs_5,avg_yrs_6,avg_yrs_7))
plot(p_vs_TimeSpentDF$No_of_projects,p_vs_TimeSpentDF$Avg_Years_Spent,xlab = "No of Projects",ylab = "Average Years spent",main = "Plot of Projects vs Average Years Spent",type = 'b')
ggplot(p_vs_TimeSpentDF,aes(x=No_of_projects, y=Avg_Years_Spent)) +
geom_line(aes(color=No_of_projects)) +
geom_point(aes(color=No_of_projects)) +
ggtitle("No of Projects vs Average Years Spent") +
labs(y ="Average Years Spent",x = "No of Projects",fill="No of Projects")
##correlation plot
ggcorr(hrData[,1:(ncol(hrData)-2)], hjust = 0.75, size = 5, color = "grey25", layout.exp = 2)
############################
#By Last Evaluation
############################
leDF = data.frame(aggregate(left~last_evaluation,data = hrData,FUN = length))
colnames(leDF) = c("LastEvaluation","TotalEmployees")
leDF$Left = (aggregate(left~last_evaluation,data = hrData,FUN = sum))[,2]
leDF$Stayed = leDF$TotalEmployees - leDF$Left
leDF$Attrition = (leDF$Left / leDF$TotalEmployees) * 100
leDF$LastEvaluation = as.factor(leDF$LastEvaluation)
leDFMelt = melt(leDF[,c("LastEvaluation","Stayed","Left")])
ggplot(leDFMelt,aes(x = LastEvaluation,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")+
theme(axis.text.x = element_text(size=7, angle=90 , hjust=0.95,vjust=0.95)) + xlab("Last Evaluation in Years")
ggplot(leDF,aes(x=LastEvaluation, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition)) +
theme(axis.text.x = element_text(size=7, angle=90 , hjust=0.95,vjust=0.95)) + xlab("Last Evaluation in Years")
ggplot(noHours,aes(x=Average_Monthly_Hours, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition))
ggplot(noHours,aes(x=Average_Monthly_Hours, y=Attrition , group = 1)) +
geom_line(aes(color=Attrition)) +
geom_point(aes(color=Attrition))
noHours
hrData[which(Average_Monthly_Hours>125 & Average_Monthly_Hours<162)]
hrData[which(Average_Monthly_Hours>125 & Average_Monthly_Hours<162),]
hrData[which(average_montly_hours>125 & average_montly_hours<162),]
patchHr = hrData[which(average_montly_hours>125 & average_montly_hours<162),]
patchHr = hrData[which(average_montly_hours>125 & average_montly_hours<162,left == 1),]
patchHr
pairs(patchHr)
nrows(patchHr)
nrow(patchHr)
patchHr = hrData[which(average_montly_hours>125 & average_montly_hours<162 & left == 1),]
nrow(patchHr)
pairs(patchHr)
nrow(hrData[which(satisfaction_level >0.5 & left == 1),])
nrow(hrData[which(satisfaction_level >0.7 & left == 1),])
which(min(hrDataaverage_montly_hours)
which(min(hrDataaverage_montly_hours))
which(min(hrDataaverage_montly_hours))
which(min(hrData$average_montly_hours))
min(hrData$average_montly_hours))
hrData[which(min(hrDataaverage_montly_hours) ]
min(hrData$average_montly_hours))
hrData[which(min(hrDataaverage_montly_hours) ]
min(hrData$average_montly_hours))
summary(hrData)
