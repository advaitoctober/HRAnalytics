load("~/Documents/GitHub/HRAnalytics/Data/EDA.RData")
setwd("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data")
getwd()
barplot(salDF$PercentLeft,names.arg = salDF$Salary,ylab = "Attrition Percent",xlab = "Salary")
ggplot(promoDF, aes(Promotion,NoOfEmployees , fill = Left)) +
geom_bar(stat="identity", position = "dodge")
ggplot(promoDF, aes(Promotion,NoOfEmployees , fill = Left)) +
geom_bar(stat="identity", position = "dodge")
require(class)
library(ggplot2)
require(reshape2)
ggplot(promoDF, aes(Promotion,NoOfEmployees , fill = Left)) +
geom_bar(stat="identity", position = "dodge")
depDFMelt
ggplot(depDFMelt,aes(x = Department,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge")
ggplot(depDF,aes(x = Department,y = Attrition)) +
geom_bar(aes(fill = Attrition),stat = "identity",position = "dodge")
rm(list = ls())
setwd("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data")
getwd()
require(class)
library(caret)
library(klaR)
library("rpart")
library("rpart.plot")
library(randomForest)
library(gbm)
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
hrData$left <- as.factor(hrData$left)
leaveSat = hrData[,1]
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
hrData$satisfaction_level = NULL
attach(hrData)
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
modelName = c()
testErrVector = c()
trainErrVector = c()
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
LG_test_err <- mean(as.factor(hrLGPred_test) != hr_test$left)
LG_train_err <- mean(as.factor(hrLGPred_train) != hr_train$left)
modelName = c(modelName,'Logistic regression')
testErrVector = c(testErrVector,LG_test_err)
trainErrVector = c(trainErrVector,LG_train_err)
hrLDAMod <- lda(left~., data = hr_train)
summary(hrLDAMod)
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
LDA_test_err <- mean(hrLDAPred_test$class != hr_test$left)
LDA_train_err <- mean(hrLDAPred_train$class != hr_train$left)
modelName = c(modelName,'LDA')
testErrVector = c(testErrVector,LDA_test_err)
trainErrVector = c(trainErrVector,LDA_train_err)
hrQDAMod <- qda(left~., data = hr_train)
summary(hrQDAMod)
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
QDA_test_err <- mean(hrQDAPred_test$class != hr_test$left)
QDA_train_err <- mean(hrQDAPred_train$class != hr_train$left)
modelName = c(modelName,'QDA')
testErrVector = c(testErrVector,QDA_test_err)
trainErrVector = c(trainErrVector,QDA_train_err)
model.control <- rpart.control(minsplit = 5, xval = 10, cp = 0)
hrTreeMod <- rpart(left~., data = hr_train, method = "class", control = model.control)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0.5)
min_cp = which.min(hrTreeMod$cptable[,4])
hrPruneTreeMod <- prune(hrTreeMod, cp = hrTreeMod$cptable[min_cp,1])
prp(hrPruneTreeMod, , fallen.leaves = FALSE, type=4, extra=1, varlen=0, faclen=0, yesno.yshift=-1)
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
modelName = c(modelName,'PruneTree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
varImpPlot(hrRFMod)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='class')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
modelName = c(modelName,'RF')
testErrVector = c(testErrVector,RF_test_err)
trainErrVector = c(trainErrVector,RF_train_err)
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 9)
varImpPlot(hrBAGMod)
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 9)
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 8)
hrBAGPred_test <- predict(hrBAGMod, newdata = hr_test,type='class')
hrBAGPred_train <- predict(hrBAGMod, newdata = hr_train, type='class')
hrBAGPred_valid <- predict(hrBAGMod, newdata = hr_valid, type='class')
BAG_test_err <- mean(hrBAGPred_test != hr_test$left)
BAG_train_err <- mean(hrBAGPred_train != hr_train$left)
BAG_valid_err <- mean(hrBAGPred_valid != hr_valid$left)
modelName = c(modelName,'BAG')
testErrVector = c(testErrVector,BAG_test_err)
trainErrVector = c(trainErrVector,BAG_train_err)
dep = floor(sqrt(NCOL(data)))
boost_train = hr_train
boost_train$left = as.numeric(boost_train$left)-1
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_train <- predict(hrBOOSTMod, newdata = hr_train,type='response', n.trees = 10000)
hrBOOSTPred_train <- predict(hrBOOSTMod, newdata = hr_train,type='response', n.trees = 1000)
hrBOOSTPred_valid <- predict(hrBOOSTMod, newdata = hr_valid,type='response', n.trees = 1000)
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_train_err <- mean(hrBOOSTPred_train != hr_train$left)
BOOST_valid_err <- mean(hrBOOSTPred_valid != hr_valid$left)
modelName = c(modelName,'BOOST')
testErrVector = c(testErrVector,BOOST_test_err)
trainErrVector = c(trainErrVector,BOOST_train_err)
errorDF = data.frame(Model_Name = modelName,Training_Error = trainErrVector,Test_Error = testErrVector)
View(errorDF)
View(errorDF)
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .0001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_train <- predict(hrBOOSTMod, newdata = hr_train,type='response', n.trees = 1000)
hrBOOSTPred_valid <- predict(hrBOOSTMod, newdata = hr_valid,type='response', n.trees = 1000)
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_test_err
hrBOOSTPred_test
hr_test$left
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =100,shrinkage = .0001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 100)
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_test_err
BOOST_test_err
hrBOOSTPred_test
