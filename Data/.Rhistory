rm(list = ls())
setwd("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data")
getwd()
require(class)
library(caret)
library(klaR)
library("rpart")
library("rpart.plot")
library(randomForest)
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
pairs(hrData)
attach(hrData)
leaveSat = hrData[,1]
leaveSat = ifelse(leaveSat < 0.7,1,0)
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
modelName = c()
testErrVector = c()
trainErrVector = c()
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
LG_train_err <- sum(abs(hrLGPred_train- leftTrue_train))/length(leftTrue_train) #0.0870
LG_test_err <- sum(abs(hrLGPred_test- leftTrue_test))/length(leftTrue_test) #0.1098
modelName = c(modelName,'Logistic regression')
testErrVector = c(testErrVector,LG_test_err)
trainErrVector = c(trainErrVector,LG_train_err)
hrLDAMod <- lda(left~., data = hr_train)
summary(hrLDAMod)
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
LDA_test_err <- mean(hrLDAPred_test$class != hr_test$left)
LDA_train_err <- mean(hrLDAPred_train$class != hr_train$left)
modelName = c(modelName,'LDA')
testErrVector = c(testErrVector,LDA_test_err)
trainErrVector = c(trainErrVector,LDA_train_err)
hrQDAMod <- qda(left~., data = hr_train)
summary(hrQDAMod)
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
QDA_test_err <- mean(hrQDAPred_test$class != hr_test$left)
QDA_train_err <- mean(hrQDAPred_train$class != hr_train$left)
modelName = c(modelName,'QDA')
testErrVector = c(testErrVector,QDA_test_err)
trainErrVector = c(trainErrVector,QDA_train_err)
model.control <- rpart.control(minsplit = 5, xval = 10, cp = 0)
hrTreeMod <- rpart(left~., data = hr_train, method = "class", control = model.control)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0)
min_cp = which.min(hrTreeMod$cptable[,4])
hrPruneTreeMod <- prune(hrTreeMod, cp = hrTreeMod$cptable[min_cp,1])
prp(hrPruneTreeMod, , fallen.leaves = FALSE, type=4, extra=1, varlen=0, faclen=0, yesno.yshift=-1)
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
modelName = c(modelName,'PruneTree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
varImpPlot(hrRFMod)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='response')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
modelName = c(modelName,'RF')
testErrVector = c(testErrVector,RF_test_err)
trainErrVector = c(trainErrVector,RF_train_err)
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='response')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
RF_test_err
RF_train_err
hrRFMod
?randomForest
hrData$left <- as.factor(hrData$left)
hrData$left <- as.factor(hrData$left)
attach(hrData)
attach(hrData)
leaveSat = hrData[,1]
leaveSat = ifelse(leaveSat < 0.7,1,0)
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
satPred
satPred
satPred <- mean(leaveSat != hrData$left)
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
leaveSat
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
modelName = c()
testErrVector = c()
trainErrVector = c()
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_test
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test = round(hrLGPred_test)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "class")
?predict.glm
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
hrLGPred_test
hrLGPred_test$class
hr_test$left
View(hr_test)
View(hr_test)
set.seed(786)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(420)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
View(hr_test)
View(hr_test)
hr_train
hr_train$left
hr_test$left
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
hr_valid
hr_valid$left
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
hr_test$left
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
modelName = c()
testErrVector = c()
trainErrVector = c()
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "class")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
hrLGPred_train
hrLGPred_test
LG_test_err <- mean(as.factor(hrLGPred_test) != hr_test$left)
LG_train_err <- mean(as.factor(hrLGPred_train) != hr_train$left)
LG_test_err
LG_train_err
modelName = c(modelName,'Logistic regression')
testErrVector = c(testErrVector,LG_test_err)
trainErrVector = c(trainErrVector,LG_train_err)
hrLDAMod <- lda(left~., data = hr_train)
summary(hrLDAMod)
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
hrLDAPred_test
hrLDAPred_test$class
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
LDA_test_err <- mean(hrLDAPred_test$class != hr_test$left)
LDA_train_err <- mean(hrLDAPred_train$class != hr_train$left)
modelName = c(modelName,'LDA')
testErrVector = c(testErrVector,LDA_test_err)
trainErrVector = c(trainErrVector,LDA_train_err)
hrQDAMod <- qda(left~., data = hr_train)
summary(hrQDAMod)
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
hrQDAPred_test$class
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
QDA_test_err <- mean(hrQDAPred_test$class != hr_test$left)
QDA_train_err <- mean(hrQDAPred_train$class != hr_train$left)
modelName = c(modelName,'QDA')
testErrVector = c(testErrVector,QDA_test_err)
trainErrVector = c(trainErrVector,QDA_train_err)
model.control <- rpart.control(minsplit = 5, xval = 10, cp = 0)
hrTreeMod <- rpart(left~., data = hr_train, method = "class", control = model.control)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0.1)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0.5)
min_cp = which.min(hrTreeMod$cptable[,4])
hrPruneTreeMod <- prune(hrTreeMod, cp = hrTreeMod$cptable[min_cp,1])
prp(hrPruneTreeMod, , fallen.leaves = FALSE, type=4, extra=1, varlen=0, faclen=0, yesno.yshift=-1)
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
PruneTree_test_err
modelName = c(modelName,'PruneTree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
hrTreeMod$cptable
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
modelName = c(modelName,'PruneTree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
varImpPlot(hrRFMod)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='response')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
hrRFPred_test
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='response')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
RF_test_err
RF_train_err
RF_valid_err
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
modelName = c(modelName,'RF')
testErrVector = c(testErrVector,RF_test_err)
trainErrVector = c(trainErrVector,RF_train_err)
hrRFPred_test
hrRFPred_train
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='class')
hrRFPred_test
hrRFPred_train
hrRFPred_valid
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_test_err
save.image("~/Documents/GitHub/HRAnalytics/Data/Classification.RData")
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 9)
varImpPlot(hrBAGMod)
hrData$satisfaction_level = NULL
attach(hrData)
leaveSat = hrData[,1]
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
hist(hrData$satisfaction_level)
set.seed(667)
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
hrData$left <- as.factor(hrData$left)
leaveSat = hrData[,1]
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
leaveSat
hrData$left
leaveSat = hrData[,1]
leaveSat = as.factor(ifelse(leaveSat < 0.7,1,0))
satPred <- mean(leaveSat != hrData$left)
satPred
hrData$satisfaction_level = NULL
attach(hrData)
hist(hrData$satisfaction_level)
hist(hrData$satisfaction_level)
hrData$satisfaction_level = NULL
attach(hrData)
set.seed(667)
validIndex <- sample(1:nrow(hrData), .10*nrow(hrData))
hr_valid <- hrData[validIndex,]
hr_pend <- hrData[-validIndex,]
set.seed(665)
trainIndex <- sample(1:nrow(hr_pend), .66*nrow(hr_pend))
hr_train <- hrData[trainIndex,]
hr_test <- hrData[-trainIndex,]
modelName = c()
testErrVector = c()
trainErrVector = c()
hrLGMod <- glm(left ~., data = hr_train, family = "binomial")
summary(hrLGMod)
names(hrLGMod)
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "class")
hrLGPred_test <- predict.glm(hrLGMod, newdata = hr_test, type = "response")
hrLGPred_train <- predict(hrLGMod, newdata = hr_train, type = "response")
hrLGPred_test = round(hrLGPred_test)
hrLGPred_train = round(hrLGPred_train)
LG_test_err <- mean(as.factor(hrLGPred_test) != hr_test$left)
LG_train_err <- mean(as.factor(hrLGPred_train) != hr_train$left)
LG_train_err
LG_test_err
modelName = c(modelName,'Logistic regression')
testErrVector = c(testErrVector,LG_test_err)
trainErrVector = c(trainErrVector,LG_train_err)
hrLDAMod <- lda(left~., data = hr_train)
summary(hrLDAMod)
hrLDAPred_test <- predict(hrLDAMod, newdata = hr_test, type = "response")
hrLDAPred_train <- predict(hrLDAMod, newdata = hr_train, type = "response")
LDA_test_err <- mean(hrLDAPred_test$class != hr_test$left)
LDA_train_err <- mean(hrLDAPred_train$class != hr_train$left)
LDA_test_err
LDA_train_err
modelName = c(modelName,'LDA')
testErrVector = c(testErrVector,LDA_test_err)
trainErrVector = c(trainErrVector,LDA_train_err)
hrQDAMod <- qda(left~., data = hr_train)
summary(hrQDAMod)
hrQDAPred_test <- predict(hrQDAMod, newdata = hr_test, type = "response")
hrQDAPred_train <- predict(hrQDAMod, newdata = hr_train, type = "response")
QDA_test_err <- mean(hrQDAPred_test$class != hr_test$left)
QDA_train_err <- mean(hrQDAPred_train$class != hr_train$left)
QDA_test_err
QDA_train_err
modelName = c(modelName,'QDA')
testErrVector = c(testErrVector,QDA_test_err)
trainErrVector = c(trainErrVector,QDA_train_err)
model.control <- rpart.control(minsplit = 5, xval = 10, cp = 0)
hrTreeMod <- rpart(left~., data = hr_train, method = "class", control = model.control)
plot(hrTreeMod, uniform = T, compress = T)
text(hrTreeMod, cex = 0.5)
min_cp = which.min(hrTreeMod$cptable[,4])
hrPruneTreeMod <- prune(hrTreeMod, cp = hrTreeMod$cptable[min_cp,1])
prp(hrPruneTreeMod, , fallen.leaves = FALSE, type=4, extra=1, varlen=0, faclen=0, yesno.yshift=-1)
hrPruneTreePred_test <- predict(hrPruneTreeMod, newdata = hr_test,type = 'class')
hrPruneTreePred_train <- predict(hrPruneTreeMod, newdata = hr_train, type='class')
hrPruneTreePred_valid <- predict(hrPruneTreeMod, newdata = hr_valid, type='class')
PruneTree_test_err <- mean(hrPruneTreePred_test != hr_test$left)
PruneTree_train_err <- mean(hrPruneTreePred_train != hr_train$left)
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
PruneTree_test_err
PruneTree_valid_err
PruneTree_valid_err <- mean(hrPruneTreePred_valid != hr_valid$left)
modelName = c(modelName,'PruneTree')
testErrVector = c(testErrVector,PruneTree_test_err)
trainErrVector = c(trainErrVector,PruneTree_train_err)
hrRFMod = randomForest(left~.,data = hr_train, n.tree =10000)
varImpPlot(hrRFMod)
hrRFPred_test <- predict(hrRFMod, newdata = hr_test,type='class')
hrRFPred_train <- predict(hrRFMod, newdata = hr_train, type='class')
hrRFPred_valid <- predict(hrRFMod, newdata = hr_valid, type='class')
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
RF_test_err
RF_test_err <- mean(hrRFPred_test != hr_test$left)
RF_train_err <- mean(hrRFPred_train != hr_train$left)
RF_valid_err <- mean(hrRFPred_valid != hr_valid$left)
modelName = c(modelName,'RF')
testErrVector = c(testErrVector,RF_test_err)
trainErrVector = c(trainErrVector,RF_train_err)
hrBAGMod = randomForest(left~.,data = hr_train, n.tree =10000, mtry = 9)
varImpPlot(hrBAGMod)
hrBAGPred_test <- predict(hrBAGMod, newdata = hr_test,type='class')
hrBAGPred_train <- predict(hrBAGMod, newdata = hr_train, type='class')
hrBAGPred_valid <- predict(hrBAGMod, newdata = hr_valid, type='class')
BAG_test_err <- mean(hrBAGPred_test != hr_test$left)
BAG_train_err <- mean(hrBAGPred_train != hr_train$left)
BAG_valid_err <- mean(hrBAGPred_valid != hr_valid$left)
BAG_test_err
RF_test_err
BAG_test_err <- mean(hrBAGPred_test != hr_test$left)
BAG_train_err <- mean(hrBAGPred_train != hr_train$left)
BAG_valid_err <- mean(hrBAGPred_valid != hr_valid$left)
modelName = c(modelName,'BAG')
testErrVector = c(testErrVector,BAG_test_err)
trainErrVector = c(trainErrVector,BAG_train_err)
?gbm
install.packages(gbm)
install.packages("gbm)
""
;
install.packages("gbm")
library(gbm)
hrBOOSTMod = gbm(left~.,data = hr_train, n.tree =10000,shrinkage = .1 ,interaction.depth = 3,distribution = 'adaboost')
?`gbm-package`
floor(sqrt(NCOL(hr_train)
floor(sqrt(NCOL(hr_train))
)
varImpPlot(hrBOOSTMod)
?predict.gbm
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='class')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='class', n.trees = 10000)
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 10000)
hrBOOSTPred_test
hrBOOSTPred_train <- predict(hrBOOSTMod, newdata = hr_train,type='response', n.trees = 10000)
hrBOOSTPred_valid <- predict(hrBOOSTMod, newdata = hr_valid,type='response', n.trees = 10000)
hrBOOSTPred_valid
hrBOOSTPred_train
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_train_err <- mean(hrBOOSTPred_train != hr_train$left)
BOOST_valid_err <- mean(hrBOOSTPred_valid != hr_valid$left)
BOOST_test_err
BOOST_train_err
BOOST_valid_err
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 100)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = hr_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
dep = floor(sqrt(NCOL(data)))
hrBOOSTMod = gbm(left~.,data = hr_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 100)
hrBOOSTPred_test
boost_train = hr_train
boost_train$left = as.numeric(boost_train$left)-1
boost_train = hr_train
boost_train$left = as.numeric(boost_train$left)-1
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .1 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .5 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .0001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .00001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
hrBOOSTMod = gbm(left~.,data = boost_train, n.tree =1000,shrinkage = .001 ,interaction.depth = dep,distribution = 'adaboost')
hrBOOSTPred_test <- predict(hrBOOSTMod, newdata = hr_test,type='response', n.trees = 1000)
hrBOOSTPred_test
BOOST_test_err <- mean(hrBOOSTPred_test != hr_test$left)
BOOST_train_err <- mean(hrBOOSTPred_train != hr_train$left)
BOOST_valid_err <- mean(hrBOOSTPred_valid != hr_valid$left)
BOOST_test_err
BOOST_train_err
BOOST_valid_err
save.image("~/Documents/GitHub/HRAnalytics/Data/Classification.RData")
save.image("~/Documents/GitHub/HRAnalytics/Data/Classification.RData")
rm(list = ls())
setwd("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data")
getwd()
require(class)
hrData <- read.delim("/Users/varadtupe/Documents/GitHub/HRAnalytics/Data/HR_comma_sep.csv", sep = ",", header= TRUE)
pairs(hrData)
attach(hrData)
highSal = subset(hrData, salary == "high")
medSal = subset(hrData, salary =="medium")
lowSal = subset(hrData, salary == "low")
summary(highSal)
summary(lowSal)
nrow(subset(highSal, left ==1)) #82/1237 6.66%
nrow(subset(medSal, left ==1)) #1317/6446 20.43%
nrow(subset(lowSal, left ==1)) #2127/7316 29.07%
cor(hrData[,1:8])
pairs(highSal)
pairs(medSal)
pairs(lowSal)
summary(highSal)
nrow(subset(highSal, left ==1)) #82/1237 6.66%
nrow(subset(medSal, left ==1)) #1317/6446 20.43%
nrow(subset(lowSal, left ==1)) #2127/7316 29.07%
cor(hrData[,1:8])
pairs(highSal)
pairs(medSal)
nrow(subset(highSal, Work_accident ==1)) # 192
nrow(subset(medSal, Work_accident ==1)) #937
nrow(subset(lowSal, Work_accident ==1)) #1040
sfLvl_left = data.frame(hrData$left,hrData$satisfaction_level)
sfLvl_left$hrData.predLeft =  ifelse(sfLvl_left$hrData.satisfaction_level < 0.5,1,0)
sfLvl_left$hrData.satisfaction_level = NULL
cor(sfLvl_left)
require(utils)
mean(sfLvl_left$hrData.left != sfLvl_left$hrData.predLeft) #20% error
